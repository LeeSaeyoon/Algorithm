## 입국심사
"""
* 문제 설명
n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.

처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다.
가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다.
하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.

모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.

입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때,
모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.

* 제한사항
입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.
각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.
심사관은 1명 이상 100,000명 이하입니다.

* 입출력 예
n	times	return
6	[7, 10]	28

* 입출력 예 설명
가장 첫 두 사람은 바로 심사를 받으러 갑니다.
7분이 되었을 때, 첫 번째 심사대가 비고 3번째 사람이 심사를 받습니다.
10분이 되었을 때, 두 번째 심사대가 비고 4번째 사람이 심사를 받습니다.
14분이 되었을 때, 첫 번째 심사대가 비고 5번째 사람이 심사를 받습니다.
20분이 되었을 때, 두 번째 심사대가 비지만 6번째 사람이 그곳에서 심사를 받지 않고
1분을 더 기다린 후에 첫 번째 심사대에서 심사를 받으면 28분에 모든 사람의 심사가 끝납니다.
"""

# 아이디어
# 심사관들이 심사하는 총 시간의 범위: 1 ~ 10억(심사관 중 최대 심사에 걸리는 시간) * n
# 범위가 크므로 이진탐색 진행
# 이 중 모든 사람을 심사할 수 있는 가장 작은 시간을 찾아야 함

def solution(n, times):
    start = 1
    end = max(times) * n

    while start <= end:
        total = 0  # 주어진 시간 내에 심사 가능한 사람 수
        mid = (start + end) // 2
        
        # 시간 내에 심사 가능한 인원 계산
        for time in times:
            total += mid // time

        # 주어진 n명 보다 적게 심사 가능한 경우 (오른쪽 탐색)
        if total < n:
            start = mid + 1
        # 주어진 n명 충분히 심사 가능한 경우 (왼쪽 탐색)
        else:
            end = mid - 1

    return start


if __name__ == '__main__':
    print(solution(6, [7, 10])) # 28
    print(solution(11, [3, 4, 10])) # 18
    print(solution(1000, [1, 1, 1000])) # 500
