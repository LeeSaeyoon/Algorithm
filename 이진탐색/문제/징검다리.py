## 징검다리
"""
* 문제 설명
출발지점부터 distance만큼 떨어진 곳에 도착지점이 있습니다.
그리고 그사이에는 바위들이 놓여있습니다. 바위 중 몇 개를 제거하려고 합니다.
예를 들어, 도착지점이 25만큼 떨어져 있고, 바위가 [2, 14, 11, 21, 17] 지점에 놓여있을 때
바위 2개를 제거하면 출발지점, 도착지점, 바위 간의 거리가 아래와 같습니다.

제거한 바위의 위치	각 바위 사이의 거리	거리의 최솟값
[21, 17]	    [2, 9, 3, 11]	    2
[2, 21]	        [11, 3, 3, 8]	    3
[2, 11]	        [14, 3, 4, 4]	    3
[11, 21]	    [2, 12, 3, 8]	    2
[2, 14]	        [11, 6, 4, 4]	    4
위에서 구한 거리의 최솟값 중에 가장 큰 값은 4입니다.

출발지점부터 도착지점까지의 거리 distance, 바위들이 있는 위치를 담은 배열 rocks, 제거할 바위의 수 n이 매개변수로 주어질 때,
바위를 n개 제거한 뒤 각 지점 사이의 거리의 최솟값 중에 가장 큰 값을 return 하도록 solution 함수를 작성해주세요.

* 제한사항
도착지점까지의 거리 distance는 1 이상 1,000,000,000 이하입니다.
바위는 1개 이상 50,000개 이하가 있습니다.
n 은 1 이상 바위의 개수 이하입니다.

* 입출력 예
distance	rocks	                n	return
25	        [2, 14, 11, 21, 17]	    2	4
"""

# 아이디어
# 거리의 범위: 0 ~ distance (10억)
# 범위가 크므로 이진탐색을 통해 범위를 좁혀가며 각 거리의 최솟값 중 가장 큰 값 구하기
# 제거한 바위의 수가 주어진 n과 같을 때마다 저장

# 주의할 점
# 바위간의 거리 계산할 때 마지막 바위와 distance 간의 거리도 계산하여야 함
# 마지막 바위와 distance 간의 거리가 제시한 거리의 최솟값보다 작은 경우
# >> mid 가 최솟값이라는 가정을 만족하지 않으므로 조건에 맞는 정답이 아님

def solution(distance, rocks, n):
    rocks.sort()

    start, end = 0, distance
    answer = 0
    while start <= end:
        mid = (start + end) // 2

        total = 0 # 제거할 바위의 수
        cur, pre = 0, 0 # 현재 바위 위치와 이전 바위 위치 저장
        for rock in rocks:
            if rock - cur < mid:
                total += 1
            else:
                cur, pre = rock, cur

        # 마지막 바위가 제거 안된 경우 마지막 바위와 distance와의 거리 확인해서 제거할 바위 수, 현재 바위 위치 갱신
        if cur == rocks[-1]:
            if distance - cur < mid:
                total += 1
                cur = pre # 저장해놓은 이전 바위 위치를 현재 바위 위치로 갱신

        # 마지막 바위와의 거리가 mid보다 작은 경우 >> mid가 최솟값이라는 가정을 만족하지 않으므로 정답이 아님
        # mid를 줄여 왼쪽 탐색
        if distance - cur < mid:
            end = mid - 1
            continue

        # 제거한돌이 주어진 수보다 많은 경우 (왼쪽 탐색)
        if total > n:
            end = mid - 1
        # 제거한 돌이 주어진 수보다 적거나 같은 경우 (오른쪽 탐색)
        else:
            answer = mid # 결과 저장
            start = mid + 1

    return answer


if __name__ == '__main__':
    print(solution(25, [2, 14, 11, 21, 17], 2))  # 4
    print(solution(10, [3, 5, 7], 2)) # 5
    print(solution(18, [2, 8, 9, 10, 11, 12, 13], 6)) # 9