## 음료수 얼려먹기
"""
N × M 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다.
구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주한다.
이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하라.
다음의 4 × 5 얼음 틀 예시에서는 아이스크림이 총 3개가 생성된다.
"""

# 아이디어: DFS / BFS
# 상하좌우로 연결가능한 노드는 인접한 것으로 볼 수 있음
# 이동가능한 모든 노드에 대해 방문처리
# - DFS
# 1. 특정한 지점의 주변 상, 하, 좌, 우를 살펴본 뒤에 주변 지점 중에서 '0'이면서 아직 방문하지 않은 지점이 있다면 해당 지점을 방문한다
# 2. 방문한 지점에서 다시 상, 하, 좌, 우를 살펴보면서 방문을 진행하는 과정을 반복하면, 연결된 모든 지점을 방문할 수 있다
# 3. 모든 노드에 대하여 1 ~ 2번의 과정을 반복하며, 방문하지 않은 지점의 수를 카운트한다

def solution(n, m, s):
    graph = []
    for i in range(n):
        graph.append(list(map(int, s[i])))

    # DFS로 특정 노드 및 연결된 모든 노드 방문
    def dfs(x, y):
        # 주어진 범위를 넘어가거나 1이면 종료 (반환 처리)
        if x < 0 or x >= n or y < 0 or y >= m or graph[x][y] == 1:
            return
        # 미방문 노드 탐색 진행
        graph[x][y] = 1 # 방문표시
        dfs(x - 1, y)
        dfs(x, y - 1)
        dfs(x + 1, y)
        dfs(x, y + 1)

    result = 0
    for i in range(n):
        for j in range(m):
            if graph[i][j] == 0:
                dfs(i, j)
                result += 1

    return result


if __name__ == '__main__':
    print(solution(4, 5,
                   ["00110",
                    "00011",
                    "11111",
                    "00000"]))
