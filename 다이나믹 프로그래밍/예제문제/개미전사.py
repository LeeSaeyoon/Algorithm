## 개미전사
"""
개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량창고를 몰래 공격하려고 한다.
메뚜기 마을에는 여러 개의 식량창고가 있는데 식량창고는 일직선으로 이어져 있다
각 식량창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 식량창고를 선택적으로 약탈하여 식량을 빼앗을 예정이다.
이때 메뚜기 정찰병들은 일직선상에 존재하는 식량창고 중에서 서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있다
따라서 개미 전사가 정찰병에 들키지 않고 식량창고를 약탈하기 위해서는
최소한 한 칸 이상 떨어진 식량창고를 약탈해야 한다

예를 들어 식량창고 4개가 다음과 같이 존재한다고 가정하자
[1, 3, 1, 5]
이때 개미 전사는 두 번째 식량창고와 네 번째 식량창고를 선택했을 때 최댓값인 총 8개의 식량을 빼앗을 수 있다.
개미 전사는 식량창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기를 원한다
개미 전사를 위해 식량창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하라
"""

# 아이디어
# 먼저 해당 문제가 다이나믹 프로그래밍을 이용하는 문제인 이유
# 1. 최적 부분 구조: 큰 문제를 작은 문제로 나눌 수 있다
#   - 각 a_i번째 식량창고까지의 최적의 해를 구하는 문제로 풀 수 있다
# 2. 중복되는 부분 문제: 동일한 작은 문제를 반복적으로 해결한다
#   - a_i번째까지의 최적의 해를 1부터 n까지 계속해서 구해가는 방식으로 반복해서 풀 수 있다

# 왼쪽부터 차례대로 식량창고를 턴다고 했을 때,
# 특정한 i번째 식량창고에 대해서 털지 안 털지의 여부를 결정하면, 2가지 중에서 더 많은 식량을 털 수 있는 경우를 선택하면 된다
# i-1번째 털었을 때 i번째 털 수 없음
# i-2번째 털었을 때 i번째 털 수 있음

# a_i: i번째 식량창고까지의 최적의 해
# k_i: i번째 식량창고에 있는 식량의 양
# 점화식: a_i = max(a_(i-1), a_(i-2) + k_i)

# 주의할 점
# 한 칸 이상 떨어진 식량창고는 항상 털 수 있으므로 i-3번째 이하는 고려할 필요가 없다
# 3 <= n <= 100
# 0 <= k <= 1000


def solution(n, k):
    # DP 테이블 초기화
    dp = [0] * n

    # Bottom-up DP
    dp[0] = k[0]
    dp[1] = max(k[0], k[1])
    for i in range(2, n):
        dp[i] = max(dp[i-1], dp[i-2] + k[i])

    return dp[n-1]


if __name__ == '__main__':
    print(solution(4, [1, 3, 1, 5])) # 8