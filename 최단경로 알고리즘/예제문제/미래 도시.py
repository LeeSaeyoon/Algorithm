## 미래 도시
"""
미래 도시에는 1번부터 N번까지의 회사가 있는데 특정 회사끼리는 서로 도로를 통해 연결되어 있다. 방문 판매원
A는 현재 1번 회사에 위치해 있으며, X번 회사에 방문해 물건을 판매하고자 한다
미래 도시의 특정 회사에 도착하기 위한 방법은 회사끼리 연결되어 있는 도로를 이용하는 방법이 유일하다
또한 연결된 2개의 회사는 양방향으로 이동할 수 있다. 공중 미래 도시에서 특정 회사와 다른 회사가 도로로
연결되어 있다면, 정확히 1만큼의 시간으로 이동할 수 있다
또한 오늘 방문 판매원 A는 기대하던 소개팅에도 참석하고자 한다. 소개팅의 상대는 K번 회사에 존재한다
방문 판매원 A씨는 X번 회사에 가서 물건을 판매하기 전에 먼저 소개팅 상대의 회사에 찾아가서 함께 커피를 마실
예정이다. 따라서 방문 판매원 A는 1번 회사에서 출발하여 K번 회사를 방문한 뒤에 X번 회사로 가는 것이 목표다
이때 방문 판매원 A는 가능한 한 빠르게 이동하고자 한다
방문 판매원이 회사 사이를 이동하게 되는 최소 시간을 계산하는 프로그램을 작성하시오

조건
1 <= N, M <= 100

출력
방문 판매원 A가 K번 회사를 거쳐 X번 회사로 가는 최소 이동 시간 출력
만약 X번 회사에 도달할 수 없다면 -1 출력
"""

# 아이디어
# 최단 거리 알고리즘 사용
# n, m이 100 이하이므로 플로이드 워셜 알고리즘 사용 가능

# 주의할 점
# 간선 비용은 항상 1

def solution(n, m, lst, x, k):
    # 무한대
    INF = int(1e9) # 10억

    # 노드 정보 담는 리스트 생성하고 모든 값 무한대로 초기화
    graph = [[INF] * (n + 1) for _ in range(n + 1)]

    # 자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화
    for a in range(1, n + 1):
        for b in range(1, n + 1):
            if a == b:
                graph[a][b] = 0

    # 간선 정보 입력
    for i in range(m):
        a, b = lst[i][0], lst[i][1]
        graph[a][b] = 1
        graph[b][a] = 1

    # 플로이드 워셜 알고리즘
    for i in range(1, n + 1):
        for a in range(1, n + 1):
            for b in range(1, n + 1):
                graph[a][b] = min(graph[a][b], graph[a][i] + graph[i][b])

    # 결과
    distance = graph[1][k] + graph[k][x]
    return distance if distance < INF else -1


if __name__ == '__main__':
    print(solution(5, 7, [[1, 2],
                          [1, 3],
                          [1, 4],
                          [2, 4],
                          [3, 4],
                          [3, 5],
                          [4, 5]], 4, 5)) # 3